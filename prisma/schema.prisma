generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  password  String
  name      String
  username  String     @unique
  avatarUrl String
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  feedback  Feedback[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("users")
}

model Post {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String     @db.ObjectId
  mediaUrl      String
  content       String
  likes         Like[]
  likeCount     Int
  feedback      Feedback[]
  feedbackCount Int
  tags          String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Feedback {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  mediaUrl     String
  timestamp    Float
  postId       String    @db.ObjectId
  post         Post      @relation(fields: [postId], references: [id])
  userId       String    @db.ObjectId
  user         User      @relation(fields: [userId], references: [id])
  comments     Comment[]
  commentCount Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("feedbacks")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  mediaUrl   String?
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  feedbackId String   @db.ObjectId
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("comments")
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}
