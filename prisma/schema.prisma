generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  password      String
  name          String
  username      String         @unique
  avatarUrl     String
  posts         Post[]
  likes         Like[]
  commentVotes  CommentVote[]
  feedbackVotes FeedbackVote[]
  comments      Comment[]
  feedback      Feedback[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Post {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String     @db.ObjectId
  mediaUrl      String
  content       String
  likes         Like[]
  likeCount     Int
  feedback      Feedback[]
  feedbackCount Int
  tags          String[]
  postType      PostType   @default(VIDEO)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("posts")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model Feedback {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  mediaUrl      String
  timestamp     Float
  postId        String         @db.ObjectId
  post          Post           @relation(fields: [postId], references: [id])
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id])
  comments      Comment[]
  votes         FeedbackVote[]
  upvoteCount   Int            @default(0)
  downvoteCount Int            @default(0)
  voteSum       Int            @default(0)
  commentCount  Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("feedbacks")
}

model Comment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  mediaUrl      String?
  userId        String        @db.ObjectId
  user          User          @relation(fields: [userId], references: [id])
  feedbackId    String        @db.ObjectId
  feedback      Feedback      @relation(fields: [feedbackId], references: [id])
  votes         CommentVote[]
  upvoteCount   Int           @default(0)
  downvoteCount Int           @default(0)
  voteSum       Int           @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("comments")
}

model CommentVote {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  direction VoteDirection
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  commentId String        @db.ObjectId
  comment   Comment       @relation(fields: [commentId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("commentVotes")
}

model FeedbackVote {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  direction  VoteDirection
  userId     String        @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  feedbackId String        @db.ObjectId
  feedback   Feedback      @relation(fields: [feedbackId], references: [id])
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("feedbackVotes")
}

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

enum VoteDirection {
  UP
  DOWN
}

enum PostType {
  VIDEO
  LINK
}
